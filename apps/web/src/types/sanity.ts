// Query TypeMap
import "@sanity/client";

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Body = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type FooterColumn = {
  _type: "footerColumn";
  title: string;
  links: Array<
    {
      _key: string;
    } & FooterColumnLink
  >;
};

export type FooterColumnLink = {
  _type: "footerColumnLink";
  name: string;
  linkType: "internal" | "external";
  internalLink?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  externalLink?: string;
  openInNewTab?: boolean;
};

export type NavigationDropdown = {
  _type: "navigationDropdown";
  title: string;
  columns: Array<
    {
      _key: string;
    } & NavigationColumn
  >;
};

export type NavigationColumn = {
  _type: "navigationColumn";
  title?: string;
  links: Array<
    {
      _key: string;
    } & NavigationColumnLink
  >;
};

export type NavigationColumnLink = {
  _type: "navigationColumnLink";
  name: string;
  linkType: "internal" | "external";
  internalLink?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  externalLink?: string;
  openInNewTab?: boolean;
};

export type NavigationLink = {
  _type: "navigationLink";
  name: string;
  linkType: "internal" | "external";
  internalLink?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  externalLink?: string;
  openInNewTab?: boolean;
};

export type Bookmark = {
  _type: "bookmark";
  reference:
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "market";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "person";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "language";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "settings";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "navigation";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "footer";
      };
  note?: string;
};

export type Accordion = {
  _type: "accordion";
  title?: string;
  panels: Array<{
    label: string;
    content: Array<
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
          listItem?: "number" | "bullet";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          caption?: string;
          _type: "image";
          _key: string;
        }
    >;
    defaultOpen?: boolean;
    _type: "panel";
    _key: string;
  }>;
  allowMultiple?: boolean;
  variant?: "default" | "bordered" | "minimal";
};

export type FilmStrip = {
  _type: "filmStrip";
  cards: Array<{
    label: string;
    buttons?: Array<
      {
        _key: string;
      } & Button
    >;
    mediaType?: "image" | "video";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    video?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      alt?: string;
      poster?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      _type: "file";
    };
    _type: "card";
    _key: string;
  }>;
};

export type Hero = {
  _type: "hero";
  slides: Array<{
    title: string;
    subTitle?: string;
    buttons?: Array<
      {
        _key: string;
      } & Button
    >;
    mediaType?: "image" | "video";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    video?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      poster: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      _type: "file";
    };
    contentAlignment?: "left" | "center" | "right";
    _type: "heroSlide";
    _key: string;
  }>;
  autoplay?: boolean;
  slideInterval?: number;
};

export type Button = {
  _type: "button";
  variant?:
    | "default"
    | "secondary"
    | "outline"
    | "link"
    | "ghost"
    | "destructive"
    | "fullGhost"
    | "CTA";
  text: string;
  linkType: "internal" | "external";
  internalLink?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  externalLink?: string;
  openInNewTab?: boolean;
};

export type RichText = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
      listItem?: "number" | "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      caption?: string;
      _type: "image";
      _key: string;
    }
>;

export type PageBuilder = Array<
  | ({
      _key: string;
    } & Hero)
  | ({
      _key: string;
    } & FilmStrip)
  | ({
      _key: string;
    } & Accordion)
>;

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  bookmarks?: Array<
    {
      _key: string;
    } & Bookmark
  >;
  userId: string;
  profileImage: string;
  languages?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "language";
  }>;
};

export type Market = {
  _id: string;
  _type: "market";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  code: string;
  languages: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "language";
  }>;
};

export type Language = {
  _id: string;
  _type: "language";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  code: string;
  isDefault?: boolean;
};

export type Footer = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label: string;
  subtitle?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  columns: Array<
    {
      _key: string;
    } & FooterColumn
  >;
  copyrightText?: string;
  language?: string;
  market?: string;
};

export type Navigation = {
  _id: string;
  _type: "navigation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label: string;
  navigationItems: Array<
    | ({
        _key: string;
      } & NavigationDropdown)
    | ({
        _key: string;
      } & NavigationLink)
  >;
  language?: string;
  market?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label: string;
  siteTitle: string;
  siteDescription: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  favicon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  socialShareImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  language?: string;
  market?: string;
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  pageBuilder?: PageBuilder;
  language?: string;
  market?: string;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<
    {
      _key: string;
    } & SanityAssistInstructionTask
  >;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<
    {
      _key: string;
    } & SanityAssistSchemaTypeField
  >;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }
    | ({
        _key: string;
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string;
      } & SanityAssistInstructionContext)
    | ({
        _key: string;
      } & SanityAssistInstructionUserInput)
  >;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<
    | ({
        _key: string;
      } & SanityAssistOutputField)
    | ({
        _key: string;
      } & SanityAssistOutputType)
  >;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<
    {
      _key: string;
    } & SanityAssistInstruction
  >;
};

export type InternationalizedArrayStringValue = {
  _type: "internationalizedArrayStringValue";
  value?: string;
};

export type InternationalizedArrayString = Array<
  {
    _key: string;
  } & InternationalizedArrayStringValue
>;

export type TranslationMetadata = {
  _id: string;
  _type: "translation.metadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<
    {
      _key: string;
    } & InternationalizedArrayReferenceValue
  >;
  schemaTypes?: Array<string>;
};

export type InternationalizedArrayReferenceValue = {
  _type: "internationalizedArrayReferenceValue";
  value?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  pageBuilder?: PageBuilder;
  language?: string;
  market?: string;
};

export type InternationalizedArrayReference = Array<
  {
    _key: string;
  } & InternationalizedArrayReferenceValue
>;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Body
  | FooterColumn
  | FooterColumnLink
  | NavigationDropdown
  | NavigationColumn
  | NavigationColumnLink
  | NavigationLink
  | Bookmark
  | Accordion
  | FilmStrip
  | Hero
  | Button
  | RichText
  | PageBuilder
  | Person
  | Market
  | Language
  | Footer
  | Navigation
  | Settings
  | HomePage
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField
  | InternationalizedArrayStringValue
  | InternationalizedArrayString
  | TranslationMetadata
  | InternationalizedArrayReferenceValue
  | Page
  | InternationalizedArrayReference
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../../apps/web/src/lib/sanity/query.ts
// Variable: LANGUAGES_QUERY
// Query: *[  _type == "language"] | order(title asc) {  _id,  title,  code,  isDefault}
export type LANGUAGES_QUERYResult = Array<{
  _id: string;
  title: string;
  code: string;
  isDefault: boolean | null;
}>;
// Variable: buttonFragment
// Query: buttons[] {    text,    linkType,    openInNewTab,    variant,    internalLink-> {      _id,      _type,      title,      slug {        _type,        current      }    },    externalLink  }
export type ButtonFragmentResult = never;
// Variable: pageBuilderFragment
// Query: pageBuilder[] {    _type == "hero" => {        _type,  _key,  autoplay,  slideInterval,  slides[] {    title,    subTitle,    contentAlignment,    buttons[] {      text,      linkType,      openInNewTab,      variant,      internalLink-> {        _id,        _type,        title,        slug {          _type,          current        }      },      externalLink    },    mediaType,    image {      asset-> {        _id,        url,        altText,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    video {      asset-> {        _id,        url      },      alt,      poster {        asset-> {          _id,          url        },        hotspot,        crop      }    }  }    },    _type == "filmStrip" => {        _type,  _key,  cards[] {    _key,    label,    buttons[] {      text,      linkType,      openInNewTab,      variant,      internalLink-> {        _id,        _type,        title,        slug {          _type,          current        }      },      externalLink    },    mediaType,    image {      asset-> {        _id,        url,        altText,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    video {      asset-> {        _id,        url      },      alt,      poster {        asset-> {          _id,          url        },        hotspot,        crop      }    }  }    },    _type == "accordion" => {        _type,  _key,  title,  allowMultiple,  variant,  panels[] {    _key,    label,    content,    defaultOpen  }    }  }
export type PageBuilderFragmentResult = never;
// Variable: HOME_PAGE_QUERY
// Query: *[  _type == "homePage"  && language == $language][0] {  _id,  _type,  title,  language,  market,    pageBuilder[] {    _type == "hero" => {        _type,  _key,  autoplay,  slideInterval,  slides[] {    title,    subTitle,    contentAlignment,    buttons[] {      text,      linkType,      openInNewTab,      variant,      internalLink-> {        _id,        _type,        title,        slug {          _type,          current        }      },      externalLink    },    mediaType,    image {      asset-> {        _id,        url,        altText,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    video {      asset-> {        _id,        url      },      alt,      poster {        asset-> {          _id,          url        },        hotspot,        crop      }    }  }    },    _type == "filmStrip" => {        _type,  _key,  cards[] {    _key,    label,    buttons[] {      text,      linkType,      openInNewTab,      variant,      internalLink-> {        _id,        _type,        title,        slug {          _type,          current        }      },      externalLink    },    mediaType,    image {      asset-> {        _id,        url,        altText,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    video {      asset-> {        _id,        url      },      alt,      poster {        asset-> {          _id,          url        },        hotspot,        crop      }    }  }    },    _type == "accordion" => {        _type,  _key,  title,  allowMultiple,  variant,  panels[] {    _key,    label,    content,    defaultOpen  }    }  }}
export type HOME_PAGE_QUERYResult = {
  _id: string;
  _type: "homePage";
  title: string;
  language: string | null;
  market: string | null;
  pageBuilder: Array<
    | {
        _type: "accordion";
        _key: string;
        title: string | null;
        allowMultiple: boolean | null;
        variant: "bordered" | "default" | "minimal" | null;
        panels: Array<{
          _key: string;
          label: string;
          content: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
                }>;
                style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
                listItem?: "bullet" | "number";
                markDefs?: Array<{
                  href?: string;
                  _type: "link";
                  _key: string;
                }>;
                level?: number;
                _type: "block";
                _key: string;
              }
            | {
                asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                };
                media?: unknown;
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                caption?: string;
                _type: "image";
                _key: string;
              }
          >;
          defaultOpen: boolean | null;
        }>;
      }
    | {
        _type: "filmStrip";
        _key: string;
        cards: Array<{
          _key: string;
          label: string;
          buttons: Array<{
            text: string;
            linkType: "external" | "internal";
            openInNewTab: boolean | null;
            variant:
              | "CTA"
              | "default"
              | "destructive"
              | "fullGhost"
              | "ghost"
              | "link"
              | "outline"
              | "secondary"
              | null;
            internalLink: {
              _id: string;
              _type: "page";
              title: string;
              slug: {
                _type: "slug";
                current: string;
              };
            } | null;
            externalLink: string | null;
          }> | null;
          mediaType: "image" | "video" | null;
          image: {
            asset: {
              _id: string;
              url: string | null;
              altText: string | null;
              metadata: {
                lqip: string | null;
                dimensions: {
                  width: number | null;
                  height: number | null;
                  aspectRatio: number | null;
                } | null;
              } | null;
            } | null;
            alt: string;
            hotspot: SanityImageHotspot | null;
            crop: SanityImageCrop | null;
          } | null;
          video: {
            asset: {
              _id: string;
              url: string | null;
            } | null;
            alt: string | null;
            poster: {
              asset: {
                _id: string;
                url: string | null;
              } | null;
              hotspot: SanityImageHotspot | null;
              crop: SanityImageCrop | null;
            } | null;
          } | null;
        }>;
      }
    | {
        _type: "hero";
        _key: string;
        autoplay: boolean | null;
        slideInterval: number | null;
        slides: Array<{
          title: string;
          subTitle: string | null;
          contentAlignment: "center" | "left" | "right" | null;
          buttons: Array<{
            text: string;
            linkType: "external" | "internal";
            openInNewTab: boolean | null;
            variant:
              | "CTA"
              | "default"
              | "destructive"
              | "fullGhost"
              | "ghost"
              | "link"
              | "outline"
              | "secondary"
              | null;
            internalLink: {
              _id: string;
              _type: "page";
              title: string;
              slug: {
                _type: "slug";
                current: string;
              };
            } | null;
            externalLink: string | null;
          }> | null;
          mediaType: "image" | "video" | null;
          image: {
            asset: {
              _id: string;
              url: string | null;
              altText: string | null;
              metadata: {
                lqip: string | null;
                dimensions: {
                  width: number | null;
                  height: number | null;
                  aspectRatio: number | null;
                } | null;
              } | null;
            } | null;
            alt: string;
            hotspot: SanityImageHotspot | null;
            crop: SanityImageCrop | null;
          } | null;
          video: {
            asset: {
              _id: string;
              url: string | null;
            } | null;
            alt: null;
            poster: {
              asset: {
                _id: string;
                url: string | null;
              } | null;
              hotspot: SanityImageHotspot | null;
              crop: SanityImageCrop | null;
            };
          } | null;
        }>;
      }
  > | null;
} | null;
// Variable: PAGE_QUERY
// Query: *[  _type == "page"  && slug.current == $slug  && language == $language][0] {  _id,  _type,  title,  slug,  language,    pageBuilder[] {    _type == "hero" => {        _type,  _key,  autoplay,  slideInterval,  slides[] {    title,    subTitle,    contentAlignment,    buttons[] {      text,      linkType,      openInNewTab,      variant,      internalLink-> {        _id,        _type,        title,        slug {          _type,          current        }      },      externalLink    },    mediaType,    image {      asset-> {        _id,        url,        altText,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    video {      asset-> {        _id,        url      },      alt,      poster {        asset-> {          _id,          url        },        hotspot,        crop      }    }  }    },    _type == "filmStrip" => {        _type,  _key,  cards[] {    _key,    label,    buttons[] {      text,      linkType,      openInNewTab,      variant,      internalLink-> {        _id,        _type,        title,        slug {          _type,          current        }      },      externalLink    },    mediaType,    image {      asset-> {        _id,        url,        altText,        metadata {          lqip,          dimensions {            width,            height,            aspectRatio          }        }      },      alt,      hotspot,      crop    },    video {      asset-> {        _id,        url      },      alt,      poster {        asset-> {          _id,          url        },        hotspot,        crop      }    }  }    },    _type == "accordion" => {        _type,  _key,  title,  allowMultiple,  variant,  panels[] {    _key,    label,    content,    defaultOpen  }    }  }}
export type PAGE_QUERYResult = {
  _id: string;
  _type: "page";
  title: string;
  slug: Slug;
  language: string | null;
  pageBuilder: Array<
    | {
        _type: "accordion";
        _key: string;
        title: string | null;
        allowMultiple: boolean | null;
        variant: "bordered" | "default" | "minimal" | null;
        panels: Array<{
          _key: string;
          label: string;
          content: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
                }>;
                style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
                listItem?: "bullet" | "number";
                markDefs?: Array<{
                  href?: string;
                  _type: "link";
                  _key: string;
                }>;
                level?: number;
                _type: "block";
                _key: string;
              }
            | {
                asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                };
                media?: unknown;
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                caption?: string;
                _type: "image";
                _key: string;
              }
          >;
          defaultOpen: boolean | null;
        }>;
      }
    | {
        _type: "filmStrip";
        _key: string;
        cards: Array<{
          _key: string;
          label: string;
          buttons: Array<{
            text: string;
            linkType: "external" | "internal";
            openInNewTab: boolean | null;
            variant:
              | "CTA"
              | "default"
              | "destructive"
              | "fullGhost"
              | "ghost"
              | "link"
              | "outline"
              | "secondary"
              | null;
            internalLink: {
              _id: string;
              _type: "page";
              title: string;
              slug: {
                _type: "slug";
                current: string;
              };
            } | null;
            externalLink: string | null;
          }> | null;
          mediaType: "image" | "video" | null;
          image: {
            asset: {
              _id: string;
              url: string | null;
              altText: string | null;
              metadata: {
                lqip: string | null;
                dimensions: {
                  width: number | null;
                  height: number | null;
                  aspectRatio: number | null;
                } | null;
              } | null;
            } | null;
            alt: string;
            hotspot: SanityImageHotspot | null;
            crop: SanityImageCrop | null;
          } | null;
          video: {
            asset: {
              _id: string;
              url: string | null;
            } | null;
            alt: string | null;
            poster: {
              asset: {
                _id: string;
                url: string | null;
              } | null;
              hotspot: SanityImageHotspot | null;
              crop: SanityImageCrop | null;
            } | null;
          } | null;
        }>;
      }
    | {
        _type: "hero";
        _key: string;
        autoplay: boolean | null;
        slideInterval: number | null;
        slides: Array<{
          title: string;
          subTitle: string | null;
          contentAlignment: "center" | "left" | "right" | null;
          buttons: Array<{
            text: string;
            linkType: "external" | "internal";
            openInNewTab: boolean | null;
            variant:
              | "CTA"
              | "default"
              | "destructive"
              | "fullGhost"
              | "ghost"
              | "link"
              | "outline"
              | "secondary"
              | null;
            internalLink: {
              _id: string;
              _type: "page";
              title: string;
              slug: {
                _type: "slug";
                current: string;
              };
            } | null;
            externalLink: string | null;
          }> | null;
          mediaType: "image" | "video" | null;
          image: {
            asset: {
              _id: string;
              url: string | null;
              altText: string | null;
              metadata: {
                lqip: string | null;
                dimensions: {
                  width: number | null;
                  height: number | null;
                  aspectRatio: number | null;
                } | null;
              } | null;
            } | null;
            alt: string;
            hotspot: SanityImageHotspot | null;
            crop: SanityImageCrop | null;
          } | null;
          video: {
            asset: {
              _id: string;
              url: string | null;
            } | null;
            alt: null;
            poster: {
              asset: {
                _id: string;
                url: string | null;
              } | null;
              hotspot: SanityImageHotspot | null;
              crop: SanityImageCrop | null;
            };
          } | null;
        }>;
      }
  > | null;
} | null;
// Variable: SETTINGS_QUERY
// Query: *[  _type == "settings"  && language == $language  && market == $market][0] {  _id,  label,  siteTitle,  siteDescription,  logo {    asset-> {      _id,      url    },    hotspot,    crop  },  favicon {    asset-> {      _id,      url    },    hotspot,    crop  },  socialShareImage {    asset-> {      _id,      url    },    hotspot,    crop  },  language,  market}
export type SETTINGS_QUERYResult = {
  _id: string;
  label: string;
  siteTitle: string;
  siteDescription: string;
  logo: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
  favicon: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
  socialShareImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
  language: string | null;
  market: string | null;
} | null;
// Variable: NAVIGATION_QUERY
// Query: *[  _type == "navigation"  && language == $language  && market == $market][0] {  _id,  label,  language,  market,  navigationItems[] {    _type == "navigationLink" => {      _type,      name,      linkType,      openInNewTab,      internalLink-> {        _id,        _type,        title,        slug {          current        }      },      externalLink    },    _type == "navigationDropdown" => {      _type,      title,      columns[] {        title,        links[] {          name,          linkType,          openInNewTab,          internalLink-> {            _id,            _type,            title,            slug {              current            }          },          externalLink        }      }    }  }}
export type NAVIGATION_QUERYResult = {
  _id: string;
  label: string;
  language: string | null;
  market: string | null;
  navigationItems: Array<
    | {
        _type: "navigationDropdown";
        title: string;
        columns: Array<{
          title: string | null;
          links: Array<{
            name: string;
            linkType: "external" | "internal";
            openInNewTab: boolean | null;
            internalLink: {
              _id: string;
              _type: "page";
              title: string;
              slug: {
                current: string;
              };
            } | null;
            externalLink: string | null;
          }>;
        }>;
      }
    | {
        _type: "navigationLink";
        name: string;
        linkType: "external" | "internal";
        openInNewTab: boolean | null;
        internalLink: {
          _id: string;
          _type: "page";
          title: string;
          slug: {
            current: string;
          };
        } | null;
        externalLink: string | null;
      }
  >;
} | null;
// Variable: FOOTER_QUERY
// Query: *[  _type == "footer"  && language == $language  && market == $market][0] {  _id,  label,  subtitle,  copyrightText,  language,  market,  logo {    asset-> {      _id,      url    },    hotspot,    crop  },  columns[] {    title,    links[] {      name,      linkType,      openInNewTab,      internalLink-> {        _id,        _type,        title,        slug {          current        }      },      externalLink    }  }}
export type FOOTER_QUERYResult = {
  _id: string;
  label: string;
  subtitle: string | null;
  copyrightText: string | null;
  language: string | null;
  market: string | null;
  logo: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
  columns: Array<{
    title: string;
    links: Array<{
      name: string;
      linkType: "external" | "internal";
      openInNewTab: boolean | null;
      internalLink: {
        _id: string;
        _type: "page";
        title: string;
        slug: {
          current: string;
        };
      } | null;
      externalLink: string | null;
    }>;
  }>;
} | null;
// Variable: MARKETS_QUERY
// Query: *[  _type == "market"] | order(title asc) {  _id,  title,  code,  languages[]-> {    _id,    title,    code,    isDefault  }}
export type MARKETS_QUERYResult = Array<{
  _id: string;
  title: string;
  code: string;
  languages: Array<{
    _id: string;
    title: string;
    code: string;
    isDefault: boolean | null;
  }>;
}>;
// Variable: PERSON_QUERY
// Query: *[  _type == "person"  && userId == $userId][0] {  _id,  name,  userId,  profileImage,  bookmarks[] {    _key,    reference-> {      _id,      _type,      title,      name,      siteTitle,      label    },    note  },  languages[]-> {    _id,    title,    code,    isDefault  }}
export type PERSON_QUERYResult = {
  _id: string;
  name: string;
  userId: string;
  profileImage: string;
  bookmarks: Array<{
    _key: string;
    reference:
      | {
          _id: string;
          _type: "footer";
          title: null;
          name: null;
          siteTitle: null;
          label: string;
        }
      | {
          _id: string;
          _type: "language";
          title: string;
          name: null;
          siteTitle: null;
          label: null;
        }
      | {
          _id: string;
          _type: "market";
          title: string;
          name: null;
          siteTitle: null;
          label: null;
        }
      | {
          _id: string;
          _type: "navigation";
          title: null;
          name: null;
          siteTitle: null;
          label: string;
        }
      | {
          _id: string;
          _type: "page";
          title: string;
          name: null;
          siteTitle: null;
          label: null;
        }
      | {
          _id: string;
          _type: "person";
          title: null;
          name: string;
          siteTitle: null;
          label: null;
        }
      | {
          _id: string;
          _type: "settings";
          title: null;
          name: null;
          siteTitle: string;
          label: string;
        };
    note: string | null;
  }> | null;
  languages: Array<{
    _id: string;
    title: string;
    code: string;
    isDefault: boolean | null;
  }> | null;
} | null;

declare module "@sanity/client" {
  interface SanityQueries {
    '*[\n  _type == "language"\n] | order(title asc) {\n  _id,\n  title,\n  code,\n  isDefault\n}': LANGUAGES_QUERYResult;
    "\n  buttons[] {\n    text,\n    linkType,\n    openInNewTab,\n    variant,\n    internalLink-> {\n      _id,\n      _type,\n      title,\n      slug {\n        _type,\n        current\n      }\n    },\n    externalLink\n  }\n": ButtonFragmentResult;
    '\n  pageBuilder[] {\n    _type == "hero" => {\n      \n  _type,\n  _key,\n  autoplay,\n  slideInterval,\n  slides[] {\n    title,\n    subTitle,\n    contentAlignment,\n    buttons[] {\n      text,\n      linkType,\n      openInNewTab,\n      variant,\n      internalLink-> {\n        _id,\n        _type,\n        title,\n        slug {\n          _type,\n          current\n        }\n      },\n      externalLink\n    },\n    mediaType,\n    image {\n      asset-> {\n        _id,\n        url,\n        altText,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    video {\n      asset-> {\n        _id,\n        url\n      },\n      alt,\n      poster {\n        asset-> {\n          _id,\n          url\n        },\n        hotspot,\n        crop\n      }\n    }\n  }\n\n    },\n    _type == "filmStrip" => {\n      \n  _type,\n  _key,\n  cards[] {\n    _key,\n    label,\n    buttons[] {\n      text,\n      linkType,\n      openInNewTab,\n      variant,\n      internalLink-> {\n        _id,\n        _type,\n        title,\n        slug {\n          _type,\n          current\n        }\n      },\n      externalLink\n    },\n    mediaType,\n    image {\n      asset-> {\n        _id,\n        url,\n        altText,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    video {\n      asset-> {\n        _id,\n        url\n      },\n      alt,\n      poster {\n        asset-> {\n          _id,\n          url\n        },\n        hotspot,\n        crop\n      }\n    }\n  }\n\n    },\n    _type == "accordion" => {\n      \n  _type,\n  _key,\n  title,\n  allowMultiple,\n  variant,\n  panels[] {\n    _key,\n    label,\n    content,\n    defaultOpen\n  }\n\n    }\n  }\n': PageBuilderFragmentResult;
    '*[\n  _type == "homePage"\n  && language == $language\n][0] {\n  _id,\n  _type,\n  title,\n  language,\n  market,\n  \n  pageBuilder[] {\n    _type == "hero" => {\n      \n  _type,\n  _key,\n  autoplay,\n  slideInterval,\n  slides[] {\n    title,\n    subTitle,\n    contentAlignment,\n    buttons[] {\n      text,\n      linkType,\n      openInNewTab,\n      variant,\n      internalLink-> {\n        _id,\n        _type,\n        title,\n        slug {\n          _type,\n          current\n        }\n      },\n      externalLink\n    },\n    mediaType,\n    image {\n      asset-> {\n        _id,\n        url,\n        altText,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    video {\n      asset-> {\n        _id,\n        url\n      },\n      alt,\n      poster {\n        asset-> {\n          _id,\n          url\n        },\n        hotspot,\n        crop\n      }\n    }\n  }\n\n    },\n    _type == "filmStrip" => {\n      \n  _type,\n  _key,\n  cards[] {\n    _key,\n    label,\n    buttons[] {\n      text,\n      linkType,\n      openInNewTab,\n      variant,\n      internalLink-> {\n        _id,\n        _type,\n        title,\n        slug {\n          _type,\n          current\n        }\n      },\n      externalLink\n    },\n    mediaType,\n    image {\n      asset-> {\n        _id,\n        url,\n        altText,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    video {\n      asset-> {\n        _id,\n        url\n      },\n      alt,\n      poster {\n        asset-> {\n          _id,\n          url\n        },\n        hotspot,\n        crop\n      }\n    }\n  }\n\n    },\n    _type == "accordion" => {\n      \n  _type,\n  _key,\n  title,\n  allowMultiple,\n  variant,\n  panels[] {\n    _key,\n    label,\n    content,\n    defaultOpen\n  }\n\n    }\n  }\n\n}': HOME_PAGE_QUERYResult;
    '*[\n  _type == "page"\n  && slug.current == $slug\n  && language == $language\n][0] {\n  _id,\n  _type,\n  title,\n  slug,\n  language,\n  \n  pageBuilder[] {\n    _type == "hero" => {\n      \n  _type,\n  _key,\n  autoplay,\n  slideInterval,\n  slides[] {\n    title,\n    subTitle,\n    contentAlignment,\n    buttons[] {\n      text,\n      linkType,\n      openInNewTab,\n      variant,\n      internalLink-> {\n        _id,\n        _type,\n        title,\n        slug {\n          _type,\n          current\n        }\n      },\n      externalLink\n    },\n    mediaType,\n    image {\n      asset-> {\n        _id,\n        url,\n        altText,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    video {\n      asset-> {\n        _id,\n        url\n      },\n      alt,\n      poster {\n        asset-> {\n          _id,\n          url\n        },\n        hotspot,\n        crop\n      }\n    }\n  }\n\n    },\n    _type == "filmStrip" => {\n      \n  _type,\n  _key,\n  cards[] {\n    _key,\n    label,\n    buttons[] {\n      text,\n      linkType,\n      openInNewTab,\n      variant,\n      internalLink-> {\n        _id,\n        _type,\n        title,\n        slug {\n          _type,\n          current\n        }\n      },\n      externalLink\n    },\n    mediaType,\n    image {\n      asset-> {\n        _id,\n        url,\n        altText,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          }\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    video {\n      asset-> {\n        _id,\n        url\n      },\n      alt,\n      poster {\n        asset-> {\n          _id,\n          url\n        },\n        hotspot,\n        crop\n      }\n    }\n  }\n\n    },\n    _type == "accordion" => {\n      \n  _type,\n  _key,\n  title,\n  allowMultiple,\n  variant,\n  panels[] {\n    _key,\n    label,\n    content,\n    defaultOpen\n  }\n\n    }\n  }\n\n}': PAGE_QUERYResult;
    '*[\n  _type == "settings"\n  && language == $language\n  && market == $market\n][0] {\n  _id,\n  label,\n  siteTitle,\n  siteDescription,\n  logo {\n    asset-> {\n      _id,\n      url\n    },\n    hotspot,\n    crop\n  },\n  favicon {\n    asset-> {\n      _id,\n      url\n    },\n    hotspot,\n    crop\n  },\n  socialShareImage {\n    asset-> {\n      _id,\n      url\n    },\n    hotspot,\n    crop\n  },\n  language,\n  market\n}': SETTINGS_QUERYResult;
    '*[\n  _type == "navigation"\n  && language == $language\n  && market == $market\n][0] {\n  _id,\n  label,\n  language,\n  market,\n  navigationItems[] {\n    _type == "navigationLink" => {\n      _type,\n      name,\n      linkType,\n      openInNewTab,\n      internalLink-> {\n        _id,\n        _type,\n        title,\n        slug {\n          current\n        }\n      },\n      externalLink\n    },\n    _type == "navigationDropdown" => {\n      _type,\n      title,\n      columns[] {\n        title,\n        links[] {\n          name,\n          linkType,\n          openInNewTab,\n          internalLink-> {\n            _id,\n            _type,\n            title,\n            slug {\n              current\n            }\n          },\n          externalLink\n        }\n      }\n    }\n  }\n}': NAVIGATION_QUERYResult;
    '*[\n  _type == "footer"\n  && language == $language\n  && market == $market\n][0] {\n  _id,\n  label,\n  subtitle,\n  copyrightText,\n  language,\n  market,\n  logo {\n    asset-> {\n      _id,\n      url\n    },\n    hotspot,\n    crop\n  },\n  columns[] {\n    title,\n    links[] {\n      name,\n      linkType,\n      openInNewTab,\n      internalLink-> {\n        _id,\n        _type,\n        title,\n        slug {\n          current\n        }\n      },\n      externalLink\n    }\n  }\n}': FOOTER_QUERYResult;
    '*[\n  _type == "market"\n] | order(title asc) {\n  _id,\n  title,\n  code,\n  languages[]-> {\n    _id,\n    title,\n    code,\n    isDefault\n  }\n}': MARKETS_QUERYResult;
    '*[\n  _type == "person"\n  && userId == $userId\n][0] {\n  _id,\n  name,\n  userId,\n  profileImage,\n  bookmarks[] {\n    _key,\n    reference-> {\n      _id,\n      _type,\n      title,\n      name,\n      siteTitle,\n      label\n    },\n    note\n  },\n  languages[]-> {\n    _id,\n    title,\n    code,\n    isDefault\n  }\n}': PERSON_QUERYResult;
  }
}
